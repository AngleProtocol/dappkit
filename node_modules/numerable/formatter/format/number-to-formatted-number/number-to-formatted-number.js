'use strict';

var isFiniteNumber = require('../../../core/utils/is-finite-number.js');
var patternRegexpUtils = require('../../utils/pattern-regexp-utils.js');
var parsePattern = require('../parse-pattern/parse-pattern.js');
var removeSignIfExists = require('./utils/remove-sign-if-exists.js');
var rescaleRoundedValue = require('./utils/rescale-rounded-value.js');
var scaleValueWithAbbreviation = require('./utils/scale-value-with-abbreviation.js');
var roundValueAndAddTrailingZeros = require('./utils/round-value-and-add-trailing-zeros.js');
var replaceDigitsWithNumeralSystem = require('./utils/replace-digits-with-numeral-system.js');
var addOrRemoveLeadingZerosToValue = require('./utils/add-or-remove-leading-zeros-to-value.js');
var addSignInfoToFullFormattedNumber = require('./utils/add-sign-info-to-full-formatted-number.js');
var splitNumberIntegerAndDecimalParts = require('./utils/split-number-integer-and-decimal-parts.js');
var addThousandsSeparatorToValueIntegerPart = require('./utils/add-thousands-separator-to-value-integer-part.js');
var applyAbbreviationLocalizedUnitToPatternMask = require('./utils/apply-abbreviation-localized-unit-to-pattern-mask.js');

const scaleAndRoundValue = (number, patternRules, options) => {
    // If it doesn't have abbreviation, just round the value and add trailing zeros
    if (!patternRules.compact) {
        const roundedValueAsString = roundValueAndAddTrailingZeros(number, patternRules, options);
        return [roundedValueAsString, null];
    }
    // If it has abbreviation, scales the value
    const [scaledValue, scaledValueLocalizedUnit] = scaleValueWithAbbreviation(number, patternRules, options);
    const roundedScaledValue = +roundValueAndAddTrailingZeros(scaledValue, patternRules, options);
    const [rescaledValue, rescaledValueLocalizedUnit] = rescaleRoundedValue(+roundedScaledValue, scaledValueLocalizedUnit, patternRules, options);
    const roundedRescaledValueAsStringWithTrailingZeros = roundValueAndAddTrailingZeros(rescaledValue, patternRules, options);
    return [roundedRescaledValueAsStringWithTrailingZeros, rescaledValueLocalizedUnit];
};
const numberToFormattedNumber = (number, pattern, options) => {
    var _a;
    const patternRules = parsePattern(pattern);
    // Ensure always uses a number or default number
    const resolvedValue = isFiniteNumber(number) ? number : 0;
    const [valueAsString, localizedAbbreviationUnit] = scaleAndRoundValue(resolvedValue, patternRules, options);
    // Prevents potentially wrong formatting coming from this function
    if (valueAsString === 'NaN')
        return '';
    const isValueNegative = options.signedZero ? number < 0 : +valueAsString < 0;
    const isValueZero = options.signedZero ? number === 0 : +valueAsString === 0;
    const valueAsStringWithoutSign = removeSignIfExists(valueAsString);
    const [integerPart, decimalPart] = splitNumberIntegerAndDecimalParts(valueAsStringWithoutSign, patternRules);
    const valueIntegerPartWithLeadingZeros = addOrRemoveLeadingZerosToValue(integerPart, patternRules);
    const valueIntegerPartWithThousandsSeparator = addThousandsSeparatorToValueIntegerPart(valueIntegerPartWithLeadingZeros, patternRules, options);
    const numeralSystemFromLocale = options.locale.numeralSystem;
    const integerPartWithNumeralSystem = replaceDigitsWithNumeralSystem(valueIntegerPartWithThousandsSeparator, numeralSystemFromLocale);
    const decimalPartWithNumeralSystem = replaceDigitsWithNumeralSystem(decimalPart, numeralSystemFromLocale);
    const fullNumberWithNumeralSystem = (integerPartWithNumeralSystem
        + (!!decimalPartWithNumeralSystem ? (((_a = options.locale.delimiters) === null || _a === void 0 ? void 0 : _a.decimal) || '.') + decimalPartWithNumeralSystem : ''));
    // Assembling
    const patternMaskWithAbbreviation = applyAbbreviationLocalizedUnitToPatternMask(patternRules.patternMask, localizedAbbreviationUnit, patternRules.compact);
    const patternMaskWithNumber = patternMaskWithAbbreviation.replace(`'ɵn'`, _ => `'${fullNumberWithNumeralSystem.replace(/'/g, "\\'")}'`);
    const patternMaskWithSignInfo = addSignInfoToFullFormattedNumber(patternMaskWithNumber, isValueNegative, isValueZero, patternRules);
    const cleanPatternMask = patternMaskWithSignInfo.replace(/'ɵ(nps|npe|s|a|n)'/g, '');
    const fullFormattedValueWithNormalizedText = patternRegexpUtils.patternStripAndNormalizeEscapedText(cleanPatternMask);
    return fullFormattedValueWithNormalizedText;
};

module.exports = numberToFormattedNumber;

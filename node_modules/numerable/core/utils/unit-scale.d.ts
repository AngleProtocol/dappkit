declare type ScaleUnit = string;
declare type ToBaseMultiplier = number;
/**
 * Example:
 * const timeScaleDefinition = {
 *     base: 's', // Seconds as base unit
 *     scale: {
 *         'ms': 0.001,
 *         'm': 60,
 *         'h': 60 * 60,
 *         'd': 60 * 60 * 24,
 *         'week': 60 * 60 * 24 * 7,
 *     }
 * }
 * <i> If base is null, define base as ''
 */
export interface UnitScaleDefinition {
    base: string;
    scale: Record<ScaleUnit, ToBaseMultiplier>;
}
export declare const toBase: (value: number, valueUnit: string, unitScale: UnitScaleDefinition) => number;
export declare const convertUnit: (value: number, originUnit: string, targetUnit: string, unitScale: UnitScaleDefinition) => number;
export interface ToBestOptions {
    exclude: string[];
    cutOffNumber: number;
}
/**
 * Looks through every possibility for the 'best' available unit.
 * i.e. Where the value has the fewest numbers before the decimal point,
 * but is still higher than 1.
 */
export declare const toBest: (value: number, originUnit: string, unitScale: UnitScaleDefinition, options?: Partial<ToBestOptions> | undefined) => [value: number, unit: string | null];
export declare const unitScale: (unitScaleDefinition: UnitScaleDefinition) => {
    toBase: (value: number, unit: string) => number;
    convert: (value: number, originUnit: string, targetUnit: string) => number;
    toBest: (value: number, originUnit: string, options?: ToBestOptions | undefined) => [value: number, unit: string | null];
    scaleDefinition: UnitScaleDefinition;
};
export {};

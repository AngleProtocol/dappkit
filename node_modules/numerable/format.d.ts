import { NumerableLocale } from './locale/types/numerable-locale';
import { NumerableFormatNumberOptions } from './formatter/types/format-number-options';
/**
 * @example
 * ```javascript
 * format(0.58, '0.0 %')
 * //=> '58.0 %'
 * format(1000.582, '0,0.00', { locale: fr })
 * //=> '1 000,58'
 * format(1000.58, '0.0 a', { locale: de })
 * //=> '1,0 k'
 * ```
 * Format the given number applying the provided pattern and options.
 *
 * options:
 * ```typescript
 * {
 *   nullFormat?: string;
 *   nanFormat?: string;
 *   zeroFormat?: string;
 *   defaultPattern?: string;
 *   rounding?: 'truncate' | 'ceil' | 'floor' | 'round' | ((scaledValueForRounding: number) => number);
 *   locale?: NumerableLocale;
 *   type?: string;
 *   scalePercentage?: boolean;
 *   formatters?: NumerableFormatter[] | ((builtInFormatters: NumerableFormatter[]) => NumerableFormatter[]);
 * }
 * ```
 *
 * @param number number: The number to format (e.g. **10.23**)
 * @param pattern pattern: The formatting pattern (e.g. **'0,0.00 %'**)
 * @param options options: The options used to format the number
 *     ```typescript
 *     {
 *        nullFormat?: string;
 *        nanFormat?: string;
 *        zeroFormat?: string;
 *        defaultPattern?: string;
 *        rounding?: 'truncate' | 'ceil' | 'floor' | 'round' | ((scaledValueForRounding: number) => number);
 *        locale?: NumerableLocale;
 *        type?: string;
 *        scalePercentage?: boolean;
 *        formatters?: NumerableFormatter[] | ((builtInFormatters: NumerableFormatter[]) => NumerableFormatter[]);
 *     }
 *     ```
 */
declare function format(number: number | string | null | undefined, pattern: string | null | undefined, options?: NumerableFormatNumberOptions): string;
declare namespace format {
    var withOptions: (options: NumerableFormatNumberWithOptionsOptions) => typeof format;
}
declare function format(number: number | string | null | undefined, options: NumerableFormatNumberOptions): string;
declare namespace format {
    var withOptions: (options: NumerableFormatNumberWithOptionsOptions) => typeof format;
}
declare function format(number: number | string | null | undefined): string;
declare namespace format {
    var withOptions: (options: NumerableFormatNumberWithOptionsOptions) => typeof format;
}
interface NumerableFormatNumberWithOptionsOptions extends Omit<NumerableFormatNumberOptions, 'locale'> {
    locale?: NumerableLocale | string | (() => NumerableLocale | string);
}
export declare const createFormatFunction: (options: NumerableFormatNumberWithOptionsOptions) => typeof format;
export default format;
